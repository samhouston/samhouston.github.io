Javascript is not only limited to syntax and inheritance models. Its simplicity is decieving, but the programming language has garnered thousands of supporters and active contributors, creating a community that has taken the language to its limits and beyond. Used right, this little oddity, birthed out of the savage competition of who would control content on the internet, has come a long way and nowadays it commands respect among older and more established languages in terms of protability, flexibility and a chameleonic ability to take on the form users need. If it doesn't have an implementation in Javascript, rest assure someone in the community is hard at work writing a library that is most likely Open Sourced and under the GNU, BSD, or Creative Commons licenses. The greatest strength of Javascript, more than its feautres, is its vibrant community that accomplishes feats of code that months ago were thought of as difficult or even impossible.

The following will be just a rundown of Third-Party, External Javascript Libraries all available for download at absolutely no cost.

jQuery is perhaps the most popular Javascript Library of them all. Its omnipresence so big almost to the point of annoyance for purists of the language, John Resig's work has shaped the course of the language, its user-base, and ease of access. jQuery is, first and foremost, a library to modify the Document Object Model. CSS Animations, Mouse Clicks, Events, Keyboard Clicks and Markup Manipulations are jQuery's specialty. Javascript has a DOM API that is known to be cumbersome at best, counter-intuitive at worst. Not every web browser implements changes to markup the same, not every web browser renders HTML and CSS the same way, and no browser executes JavaScript in the same manner. jQuery is a library that is prepared to account for those changes and put absolute control in the hands of developers, without nasty surprises or caveats that make them write client-specific code. While it's true the use of jQuery may make some developers lazy and dependent of the tool, it's effectiveness is never questioned. Among jQuery's products there's a UI library, a mobile-specific version, and a unit testing framework. Most visual frameworks, like Zurb Foundation, Twitter Bootstrap, and Sencha Touch, are built on top of jQuery. There are tens of thousands of plugins that extend jQuery's functionality, and growing.

The Phaser Game Engine is a production-tested, well-maintained, and comprehensive open source game framework to make desktop and mobile browser HTML5, leveraging the power of the HTML5 Canvas element and WebGL. Developed by Richard Davey of Flixel Power Tools fame, it supports multiple kinds of sprite sheets, sprite grouping, particles, multiple cameras, touch and keyboard inputs, has multiple sound channels, renders tilemaps, has a plugin system and it's been widely accepted as one of the best game engines available for the browser. It has been deployed for games featured in BBC and Discovery Kids, has powered a great percentage of Ludum Dare entries and has an ardent community of supporters and developers that write plugins and tutorials constantly and consistently. The engine is updated constantly with bug fixes, improving features and maximizing performance. The engine supports both native Javascript and Typescript, and its available for free in GitHub.

If 3D Games are more your cup of tea, Three.js offers a widely available and free option. Created by Ricard Cabello, Three.js is a library used to create and display animated 3D computer graphics within a webpage, using the OpenGL subset specifically for browsers: WebGL. Three.js abstracts away shader and material code to offer an easier way to implement models, textures, and lighting. It supports Canvas rendering, orthographic and perspective cameras, forward and inverse kinematics, lambert and phong materials, GLSL shaders, data loaders, supports JSON data ported from Blender, and is bundled with a Debugging Inspector. Experiments and full fledged complete projects are available on the website threejs.org.

If graphics are not of your interest, building applications on the web has become a cinch in recent years with MV* libraries. Following the time-tested pratice of separating Data Storing, Data Handling, and Communication with the User into the MVC paradaigm, a series of libraries have made the work of web developers easier by taking care of boilerplate code, browser, and language quirks. The * in MV* accounts the variety of solutions people have come up with in regards of figuring out how to make Model and View communicate with each other. There are many MV* frameworks, but Angular.js and Backbone.js are the most used and with good reason. Angular, developed and maintained by Google, assists the creation of single-page applications, simplyfing its development and testing. The library makes use of custom HTML tags and attributes, directives to tell Angular to bind input and output to certain parts of the markup. It decouples the markup from application logic, and provides a loosely coupled structure. Backbone.js is another library that follows the MV-Presenter paradigm, and my personal tool of choice. Backbone is a lightweight, general purpose library that is designed to keep Model and View synchronized with each other, sending and recieving events that prompt changes within the markup. It's lightweight, un-opinionated and requires templates written in underscore.js rather than special tags and attributes in the markup. It's also quite extensible, with a wealth of plugins that complement Backbone's functionality.

If building applications for the web is not of your interests, how about building applications for all mobile operating systems at once? Apache Cordova, and it's closed-source implementation Adobe Phonegap, is a mobile development framework that enables developers to build applications for mobile devices using JavaScript, HTML5 and CSS. Instead of relying on separate native-code APIs for each platform, Cordova enables users to create one codebase for all platforms. It supports deployment to iOS, Symbian, Android, FirefoxOS, Ubuntu Touch, webOS, Windows Phone and Windows 8. The core of PhoneGap applications use HTML5 and CSS3 for their rendering, and JavaScript for their logic. Although HTML5 now provides access to underlying hardware such as the accelerometer, camera and GPS, browser support for HTML5-based device access is not consistent across mobile browsers, particularly older versions of Android. To overcome these limitations, the PhoneGap framework embeds HTML5 code inside a native WebView on the device, using a foreign function interface to access the native resources of the device. Native plug-ins allow developers to add functionality that can be called from JS, allowing for direct communication between layer and JS logic. This enable support for the accelerometer, amera, microphone, compass and file system. However this comes with the caveat that apps created on Phonegap are slower than their native counterparts, and may be rejected by Apple. 

Node.js is the prime example of the power Javascript has, and what ultimately me sold me into the programming language. Despite it has only been around since 2009, it has taken the world of networking applications by storm. Node.js, developed by Ryan Dahl and maintained by Joyent, is an open-source, cross-platform runtime environemt for server-side applications. In short, it's server code written in Javascript. It uses the Google V8 engine to execute code, with an extensive library of plugins and modules in its own package manager: npm. Since the adoption of this package manager in 2011, Node.js has seen an explosion of support from both small-time developers to large corporation such as Walmart and Paypal. Mozilla has based its own two-step authentication software, Mozilla Persona, on Node.js. It enforces non-blocking asynchronous I/O execution based around a single-threaded event loop. This is possible through the implementation of function callbacks, another benefit of having functions as objects. Circunventing in this manner its weakness of being a single-threaded process, Node.js can keep many connections alive without having to return a "busy server" status. Combining Node with a document DB and JSON serialization offers a unified development stack that allows what were traditionally client-side paradigms, such as MVC, MVP, and MVVM, Node.js allows the resue of models and services, with the added bonus of having an entire application written in a single language. Its extensibility through the package manager has allowed Node to break out of the server and enter other technologies succesfully: Socket.io is a library that establishes a two-way communication pipeline from client to server. It's based on the WebSocket connection protocol, and enables response times with under 200 ms latency. Multiplayer games and chatrooms can be written using Socket.io to guarantee quick, swift response times. Nodeuino, on the other hand, is a framework that uses Socket.io and Node.js to access Arduino boards. It enables a Javascript interface with the Arduino, enabling the user to make changes to the board loop in real time, all the while listening to events generated by Button pushes. The library is mostly in an alpha stage, but it's already showing great promise. If none of these applications sound like something you'd like to do, and you'd rather build strictly computer software, node has an answer for you through the node-webkit library. Node-webkit is an app runtime based on Chromium and node.js, enabling developers to write native apps in HTML and JS. Node-webkit wraps the developer's code in a Chromium Embedded Framework, basically a single-tab, stripped down version of chrome, with the V8 engine built in. This has the advantage to be platform agnostic, and runs on all major Operating System. It makes applications easy to package and distribute. Again, it's a nascent technology, but it is promising.